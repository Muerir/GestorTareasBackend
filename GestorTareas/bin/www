#!/usr/bin/env node

const { exec } = require('child_process');
const db = require('../models');

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('gestortareas:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Run migrations, then start server
 */
exec('node ./node_modules/sequelize-cli/lib/sequelize db:migrate', (error, stdout, stderr) => {
  if (error) {
    console.error(`❌ Error ejecutando migraciones: ${error.message}`);
    process.exit(1);
  }
  if (stderr) console.error(`⚠️ STDERR: ${stderr}`);
  console.log(`✅ Migraciones aplicadas:\n${stdout}`);

  // Solo iniciar el servidor si las migraciones se ejecutaron exitosamente
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requiere privilegios elevados`);
      process.exit(1);
    case 'EADDRINUSE':
      console.error(`${bind} ya está en uso`);
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
